@using EIST.Common
@using EIST.Web.Models
@model EIST.Web.Models.IssueModel

@{
    ViewBag.Title = "Details";
    int rowNo = 1;
    int authenticatedUserId = AuthenticatedUser.GetUserFromIdentity().UserId;
    bool IsUserRoleManager = new UserModel().CheckUserRole(authenticatedUserId, Enum.GetName(typeof(EnumUserRoleStatus), EnumUserRoleStatus.Manager));
    bool IsCustomerTypeUser = new UserModel().CheckCustomerTypeUser(authenticatedUserId);
    bool IsUserRoleDeveloper = new UserModel().CheckUserRole(authenticatedUserId, Enum.GetName(typeof(EnumUserRoleStatus), EnumUserRoleStatus.Developer));

    // Issue //
    var workflowItem = new WorkflowModel();
    var workflowList = new WorkflowModel().GetWorkflowsByRecordId(Model.Id, Enum.GetName(typeof(EnumWorkflowFormStatus), EnumWorkflowFormStatus.Issue)).ToList();
    if (workflowList.Any())
    {
        foreach (var item in workflowList)
        {
            workflowItem.Approver = item.Approver;
            workflowItem.ApprovalStatus = item.ApprovalStatus;
            workflowItem.Remarks = item.Remarks;
        }
    }
    else
    {
        workflowItem = null;
    }
    // Ticket Assign //
    var ticketAssignWorkflowItem = new WorkflowModel();
    var ticketAssignWorkflowList = new WorkflowModel().GetWorkflowsByRecordId(Model.Id, Enum.GetName(typeof(EnumWorkflowFormStatus), EnumWorkflowFormStatus.TicketAssign)).ToList();
    if (ticketAssignWorkflowList.Any())
    {
        foreach (var item in ticketAssignWorkflowList)
        {
            ticketAssignWorkflowItem.Approver = item.Approver;
            ticketAssignWorkflowItem.ApprovalStatus = item.ApprovalStatus;
            ticketAssignWorkflowItem.Remarks = item.Remarks;
        }
    }
    else
    {
        ticketAssignWorkflowItem = null;
    }
    var ticketPendingStatus = 0;
    if (Model.TicketAssignCollection.Any())
    {
        ticketPendingStatus = Model.TicketAssignCollection.FirstOrDefault().Status;
    }
}

<!-- Content area -->
<div class="content">

    <!-- Basic layout-->
    <div class="card border-teal">
        <div class="card-header bg-teal header-elements-inline">
            <h5 class="card-title"><strong>Issue</strong></h5>
            <div class="header-elements">
                <div class="list-icons">
                    <a href="@Url.Action("Index","Issue")" title="Back" class="list-icons-item"><i class="icon-arrow-left52"></i></a>
                </div>
            </div>
        </div>
        <hr class="hr-mar-reduce" />
        <div class="card-body">
            <div class="row">
                <div class="col-md-7">
                    <div class="form-group row cust-details-row">
                        <label class="col-md-3">@Html.DisplayNameFor(model => model.IssueTitle)</label>
                        <div class="col-md-7">
                            <b>:</b> @Html.DisplayFor(model => model.IssueTitle)
                        </div>
                    </div>
                    <div class="form-group row cust-details-row">
                        <label class="col-md-3">@Html.DisplayNameFor(model => model.Description)</label>
                        <div class="col-md-7">
                            <b>:</b> @if (!string.IsNullOrEmpty(Model.Description))
                            {
                                @Html.Raw(Model.Description)
                            }
                        </div>
                    </div>
                    <table class="table table-bordered table-striped table-condensed">
                        <thead>
                            <tr>
                                <th colspan="2" style="font-size:17px;">Attachment</th>
                            </tr>
                            <tr>
                                <th>#SL</th>
                                <th>@Html.DisplayName("File")</th>
                            </tr>
                        </thead>
                        <tbody id="attachmentFileTBody">
                            @if (Model.AttachmentFileCollection.Any())
                            {
                                foreach (var item in Model.AttachmentFileCollection)
                                {
                                    <tr>
                                        <td class="serial">
                                            @(rowNo++)
                                        </td>
                                        <td>
                                            <a class="title" target="_blank" href='@Url.Content(String.Format("~{0}", item.FileLocation))'>
                                                <img height="25" src="@Url.Content(String.Format("~{0}", FileExtension.GetFileExtensionThumbnail(item.FileExtension)))" />  @item.OriginalName
                                            </a>
                                        </td>
                                    </tr>
                                }
                            }
                            else
                            {
                                <tr>
                                    <td class="serial">@(rowNo++)</td>
                                    <td colspan="3" class="text-muted">No files found</td>
                                </tr>
                            }
                        </tbody>
                    </table>
                    <br />
                    @*---Comment Section---*@
                    <div class="card">
                        <div class="card-header header-elements-inline">
                            <h6 class="card-title font-weight-semibold">Discussion</h6>
                            <div class="header-elements">
                                <ul class="list-inline list-inline-dotted text-muted mb-0">
                                    <li class="list-inline-item">42 comments</li>
                                    <li class="list-inline-item">75 pending review</li>
                                </ul>
                            </div>
                        </div>
                        <div class="card-body">
                            <ul class="media-list">
                                <li class="media flex-column flex-md-row">
                                    <div class="mr-md-3 mb-2 mb-md-0">
                                        <a href="#"><img src="../../../../global_assets/images/demo/users/face2.jpg" class="rounded-circle" width="38" height="38" alt=""></a>
                                    </div>

                                    <div class="media-body">
                                        <div class="media-title">
                                            <a href="#" class="font-weight-semibold">William Jennings</a>
                                            <span class="text-muted ml-3">Just now</span>
                                        </div>

                                        <p id="commentContent">He moonlight difficult engrossed an it sportsmen. </p>
                                        <div class="editArea display-hidden">
                                            <div class="col-lg-12">
                                                @Html.TextArea("EditComment", null, new { @class = "form-control", @id = "EditComment", @placeholder = "Edit Comment" })
                                                @Html.ValidationMessage("EditComment")
                                            </div>
                                            <div class="col-lg-12">
                                                <button type="submit" class="btn btn-success btn-custom btn-right">Edit</button>
                                                <button type="button" class="btn btn-danger btn-custom btn-right" onclick="cancelFunc()">Cancel</button>
                                            </div>
                                        </div>

                                        <ul class="list-inline list-inline-dotted font-size-sm">
                                            <li class="list-inline-item">
                                                <i class="icon-heart6 text-pink mr-2"></i> 5<a href="#" class="mr-2"></a>
                                                <i class="icon-comment-discussion mr-2"></i> 114<a href="#" class=" mr-2"></a>
                                            </li>
                                            <li class="list-inline-item"><a class="btn btn-custom" onclick="replyFunc(this)"><i class="icon-reply text-success"></i> Reply</a></li>
                                            <li class="list-inline-item"><a class="btn btn-custom" onclick="editFunc(this)"><i class="icon-pencil text-warning"></i> Edit</a></li>
                                        </ul>
                                        <div class="replyArea display-hidden">
                                            <div class="col-lg-12">
                                                @Html.TextArea("ReplyComment", null, new { @class = "form-control", @id = "ReplyComment", @placeholder = "Reply Comment" })
                                                @Html.ValidationMessage("ReplyComment")
                                            </div>
                                            <div class="col-lg-12">
                                                <button type="submit" class="btn btn-custom btn-success btn-right">Reply</button>
                                                <button type="button" class="btn btn-custom btn-danger btn-right" onclick="cancelFunc()">Cancel</button>
                                            </div>
                                        </div>

                                    </div>
                                </li>
                            </ul>
                        </div>
                        <hr class="m-0">

                        <div class="card-body">
                            @*<h6 class="mb-3">Add comment</h6>*@
                            <div class="mb-3">
                                @Html.TextArea("Comment", null, new { @placeholder = "Comment", @id = "Comment", @class = "form-control" })
                                @Html.ValidationMessage("Comment")
                            </div>

                            <div class="text-right">
                                <button type="button" class="btn btn-sm bg-blue">Comment</button>
                            </div>
                        </div>
                    </div>
                    @*---Comment Section End---*@
                </div>
                <div class="col-md-5">
                    <div class="form-group row cust-details-row">
                        <label class="col-md-3">@Html.DisplayNameFor(model => model.Code)</label>
                        <div class="col-md-7">
                            <b>:</b> @Html.DisplayFor(model => model.Code)
                        </div>
                    </div>
                    <div class="form-group row cust-details-row">
                        <label class="col-md-3">@Html.DisplayNameFor(model => model.ProjectId)</label>
                        <div class="col-md-7">
                            <b>:</b>  @Html.DisplayFor(model => model.Project.Name)
                        </div>
                    </div>

                    <div class="form-group row cust-details-row">
                        <label class="col-md-3">@Html.DisplayNameFor(model => model.LabelId)</label>
                        <div class="col-md-7">
                            <b>:</b>  @Html.DisplayFor(model => model.IssueLabel.LabelTitle)
                        </div>
                    </div>

                    <div class="form-group row cust-details-row">
                        <label class="col-md-3">@Html.DisplayNameFor(model => model.Milestone)</label>
                        <div class="col-md-7">
                            <b>:</b>  @Html.DisplayFor(model => model.Milestone)
                        </div>
                    </div>
                    <div class="form-group row cust-details-row">
                        <label class="col-md-3">@Html.DisplayNameFor(model => model.Priority)</label>
                        <div class="col-md-7">
                            <b>:</b>  @(Model.Priority ? "Yes" : "No")
                        </div>
                    </div>
                    <div class="form-group row cust-details-row">
                        <label class="col-md-3">@Html.DisplayName("Issue Status")</label>
                        <div class="col-md-7">
                            <b>:</b>   <label class="badge badge-info">@Enum.GetName(typeof(EnumIssueStatus), Model.Status).Replace("_", " ")</label>
                        </div>
                    </div>
                    <div class="form-group row cust-details-row">
                        <label class="col-lg-3">@Html.DisplayName("Is Issue")</label>
                        <div class="col-md-9">
                            <b>:</b>  <label class="badge @(Model.IsClosed == false ?  "badge-success"  : "badge-danger")">@(Model.IsClosed == false ? "Open" : "Closed")</label>
                        </div>
                    </div>
                    @if (IsUserRoleManager && (Model.Status == (byte)EnumIssueStatus.Pending || Model.Status == (byte)EnumIssueStatus.Withheld))
                    {
                        <div class="card">
                            <div class="custom-header header-elements-inline">
                                <h5 class="">Issue Approval</h5>
                            </div>
                            <div class="card-body">
                                @using (Html.BeginForm("Approve", null, FormMethod.Post, new { @class = "approvalForm" }))
                                {
                                    @Html.Hidden("RecordId", Model.Id)
                                    @Html.Hidden("ApprovalId", authenticatedUserId)
                                    <div class="row">
                                        <div class="col-md-12">
                                            <div class="form-group row cust-details-row">
                                                <label class="col-md-3">@Html.DisplayName("Remarks")</label>
                                                <div class="col-md-9">
                                                    <b>:</b> @Html.TextArea("ApprovalRemarks", workflowItem != null ? workflowItem.Remarks : "", new { @class = "form-control", @required = "required" })
                                                </div>
                                            </div>
                                            <div class="pull-right" style="float: right;">
                                                <button type="submit" formaction="@Url.Action("Disapprove", "Issue")" class="btn btn-sm btn-danger pull-right">Rejected</button>
                                                <button type="submit" formaction="@Url.Action("Withhold", "Issue")" class="btn btn-sm btn-warning pull-right">Withheld</button>
                                                <button type="submit" class="btn btn-sm btn-success pull-right">Accepted</button>
                                            </div>
                                        </div>
                                    </div>
                                }
                            </div>
                        </div>
                    }
                    else
                    {
                        <div class="card">
                            <div class="custom-header header-elements-inline">
                                <h5 class="">Issue Approval</h5>
                            </div>
                            <div class="card-body">
                                <div class="row">
                                    <div class="col-md-12">
                                        <div class="form-group row cust-details-row">
                                            <label class="col-md-3">@Html.DisplayName("Remarks")</label>
                                            <div class="col-md-9">
                                                <b>:</b> @(workflowItem != null ? workflowItem.Remarks : "")
                                            </div>
                                        </div>
                                        <div class="form-group row cust-details-row">
                                            <label class="col-md-3">@Html.DisplayName("Approved By")</label>
                                            <div class="col-md-9">
                                                <b>:</b> @(workflowItem != null ? workflowItem.Approver.FullName : "")
                                            </div>
                                        </div>
                                        <div class="form-group row cust-details-row">
                                            <label class="col-md-3">@Html.DisplayName("Approved Status")</label>
                                            <div class="col-md-9">
                                                <b>:</b> @(workflowItem != null ? workflowItem.ApprovalStatus : "") - @(workflowItem != null ? string.Format("{0:dd-MMM-yyyy hh:mm tt}", workflowItem.UpdatedAt) : "")
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    }
                    @if (!IsCustomerTypeUser)
                    {
                        if (IsUserRoleManager && Model.Status == (byte)EnumIssueStatus.Accepted && (!Model.TicketAssignCollection.Any() || ticketPendingStatus == (byte)EnumTicketAssignStatus.Pending))
                        {
                            using (Html.BeginForm("TicketAssign", null, FormMethod.Post, new { @class = "ticketAssignForm" }))
                            {
                                @Html.HiddenFor(model => model.TicketAssignSelectedModel.IssueId, new { @Value = Model.Id })
                                @*@Html.Hidden("ApprovalId", authenticatedUserId)*@
                                <div class="form-group row cust-details-row">
                                    <label class="col-lg-3">@Html.DisplayName("Assignee")</label>
                                    <div class="col-lg-9">
                                        <b>:</b>  @Html.ListBoxFor(model => model.TicketAssignSelectedModel.SelectedId, new SelectList(Model.UserList, "Id", "UserName"), new { @class = "form-control input-sm select2", @multiple = "multiple", @required = "required" })
                                        @Html.ValidationMessageFor(model => model.TicketAssignSelectedModel.SelectedId)
                                    </div>
                                </div>
                                <div class="form-group row cust-details-row">
                                    <label class="col-lg-3">@Html.DisplayName("Description")</label>
                                    <div class="col-lg-9">
                                        <b>:</b>  @Html.TextAreaFor(model => model.TicketAssignSelectedModel.TicketDescription, new { @class = "form-control", @placeholder = "Ticket Description" })
                                        @Html.ValidationMessageFor(model => model.TicketAssignSelectedModel.TicketDescription)
                                    </div>
                                </div>
                                <div class="pull-right" style="float: right;">
                                    <button type="submit" class="btn btn-sm btn-success pull-right">Save</button>
                                </div>
                            }
                        }
                        else
                        {
                            if (Model.TicketAssignCollection.Any())
                            {
                                int num = 1;
                                <div class="form-group row cust-details-row">
                                    <label class="col-lg-3">@Html.DisplayName("Developer")</label>
                                    <div class="col-md-9">
                                        <b>:</b> @foreach (var item in Model.TicketAssignCollection)
                                        {
                                            <span>@num)&nbsp; @Html.DisplayFor(model => item.Assignee.UserName)</span>
                                            num++;
                                        }
                                    </div>
                                </div>

                                <div class="form-group row cust-details-row">
                                    <label class="col-lg-3">@Html.DisplayName("Ticket Description")</label>
                                    <div class="col-md-9">
                                        <b>:</b>  @Html.DisplayFor(model => model.TicketAssignCollection.FirstOrDefault().Description)
                                    </div>
                                </div>
                                <div class="form-group row cust-details-row">
                                    <label class="col-lg-3">@Html.DisplayName("Ticket Status")</label>
                                    <div class="col-md-9">
                                        <b>:</b>   <label class="badge badge-info">@Enum.GetName(typeof(EnumTicketAssignStatus), Model.TicketAssignCollection.FirstOrDefault().Status).Replace("_", " ")</label>
                                    </div>
                                </div>
                                @*<div class="form-group row cust-details-row">
                                        <label class="col-md-3">@Html.DisplayName("Developer Status")</label>
                                        <div class="col-md-9">
                                            @(ticketAssignWorkflowItem != null ? ticketAssignWorkflowItem.Approver.UserName : ""), @(ticketAssignWorkflowItem != null ? ticketAssignWorkflowItem.ApprovalStatus.Replace("_", " ") : "") - @(workflowItem != null ? string.Format("{0:dd-MMM-yyyy hh:mm tt}", workflowItem.UpdatedAt) : "")
                                        </div>
                                    </div>*@
                            }
                        }

                        if (IsUserRoleDeveloper && Model.TicketAssignCollection.Any() && (Model.TicketAssignCollection.FirstOrDefault().Status == (byte)EnumTicketAssignStatus.Pending || Model.TicketAssignCollection.FirstOrDefault().Status == (byte)EnumTicketAssignStatus.Rejected || Model.TicketAssignCollection.FirstOrDefault().Status != (byte)EnumTicketAssignStatus.Completed))
                        {
                            foreach (var item in Model.TicketAssignCollection)
                            {
                                if (item.AssigneeId == authenticatedUserId)
                                {
                                    using (Html.BeginForm("ApproveTicket", null, FormMethod.Post, new { @class = "approvalForm" }))
                                    {
                                        @Html.Hidden("RecordId", Model.Id)
                                        @Html.Hidden("ApprovalId", authenticatedUserId)
                                        <div class="form-group row cust-details-row">
                                            <label class="col-md-3">@Html.DisplayName("Remarks")</label>
                                            <div class="col-md-9">
                                                <b>:</b>  @Html.TextArea("ApprovalRemarks", ticketAssignWorkflowItem != null ? ticketAssignWorkflowItem.Remarks : "", new { @class = "form-control", @required = "required" })
                                            </div>
                                        </div>
                                        <div class="pull-right" style="float: right;">
                                            @if (Model.TicketAssignCollection.FirstOrDefault().Status == (byte)EnumTicketAssignStatus.Started)
                                            {
                                                <button type="submit" formaction="@Url.Action("CompleteTicket", "Issue")" class="btn btn-sm btn-success pull-right">Completed</button>
                                            }
                                            else
                                            {
                                                <button type="submit" formaction="@Url.Action("DelegateTicket", "Issue")" class="btn btn-sm btn-warning pull-right">Delegated</button>
                                                <button type="submit" class="btn btn-sm btn-success pull-right">Started</button>
                                            }
                                        </div>
                                    }
                                }
                            }
                        }
                        else if (ticketAssignWorkflowItem != null)
                        {
                            <div class="form-group row cust-details-row">
                                <label class="col-md-3">@Html.DisplayName("Developer Remarks")</label>
                                <div class="col-md-9">
                                    <b>:</b>  @(ticketAssignWorkflowItem != null ? ticketAssignWorkflowItem.Remarks : "")
                                </div>
                            </div>
                            <div class="form-group row cust-details-row">
                                <label class="col-md-3">@Html.DisplayName("Developer Status")</label>
                                <div class="col-md-9">
                                    <b>:</b>   @(ticketAssignWorkflowItem != null ? ticketAssignWorkflowItem.Approver.UserName : ""), @(ticketAssignWorkflowItem != null ? ticketAssignWorkflowItem.ApprovalStatus.Replace("_", " ") : "") - @(workflowItem != null ? string.Format("{0:dd-MMM-yyyy hh:mm tt}", workflowItem.UpdatedAt) : "")
                                </div>
                            </div>
                        }

                        if (IsUserRoleManager && Model.Status == (byte)EnumIssueStatus.Completed && Model.IsClosed == false)
                        {
                            <div class="pull-right" style="float: right;">

                                <span class="btn btn-sm btn-danger pull-right" onclick="IssueCloseFunc('@Model.Id')">Issue Closed</span>
                            </div>
                        }
                    }
                </div>
            </div>
        </div>
    </div>
</div>
<!-- /content area -->

@section scripts{
    @Scripts.Render("~/bundles/jqueryval")
    @Scripts.Render("~/bundles/ckeditor")
    @Scripts.Render("~/bundles/ajax-call")
    <script src="~/Scripts/select2.min.js"></script>

    <script type="text/javascript">

        function IssueCloseFunc(id) {
            var url = '@Url.Action("IssueClosed", "Issue")';
            console.log(id);
                var paramData = { id: id };
                ajaxCall(url, paramData,"renderIssueClosed");
        }
        function replyFunc(obj) {
            $(".replyArea").removeClass("display-hidden");
            $(".editArea").addClass("display-hidden");
            $("#commentContent").show();
        }
        function cancelFunc() {
            $(".replyArea").addClass("display-hidden");
            $(".editArea").addClass("display-hidden");
            $("#commentContent").show();
        }
        function editFunc(obj) {
            $("#commentContent").hide();
            $(".editArea").removeClass("display-hidden");
            $(".replyArea").addClass("display-hidden");
        }

        $(".select2").select2();

        $(document).ready(function () {
            CKEDITOR.replace('Comment', {
                // Define the toolbar groups as it is a more accessible solution.
                toolbarGroups: [{
                    "name": "basicstyles",
                    "groups": ["basicstyles"]
                },
                {
                    "name": "paragraph",
                    "groups": ["list", "blocks"]
                },
                {
                    "name": "insert",
                    "groups": ["insert"]
                },
                {
                    "name": "styles",
                    "groups": ["styles"]
                }
                ],
                // Remove the redundant buttons from toolbar groups defined above.
                removeButtons: 'Image'
            });
            CKEDITOR.replace('ReplyComment', {
                // Define the toolbar groups as it is a more accessible solution.
                toolbarGroups: [{
                    "name": "basicstyles",
                    "groups": ["basicstyles"]
                },
                {
                    "name": "paragraph",
                    "groups": ["list", "blocks"]
                },
                {
                    "name": "insert",
                    "groups": ["insert"]
                },
                {
                    "name": "styles",
                    "groups": ["styles"]
                }
                ],
                // Remove the redundant buttons from toolbar groups defined above.
                removeButtons: 'Image'
            });
            CKEDITOR.replace('EditComment', {
                // Define the toolbar groups as it is a more accessible solution.
                toolbarGroups: [{
                    "name": "basicstyles",
                    "groups": ["basicstyles"]
                },
                {
                    "name": "paragraph",
                    "groups": ["list", "blocks"]
                },
                {
                    "name": "insert",
                    "groups": ["insert"]
                },
                {
                    "name": "styles",
                    "groups": ["styles"]
                }
                ],
                // Remove the redundant buttons from toolbar groups defined above.
                removeButtons: 'Image'
            });
        });

        function formSubmit() {
            rearrangeNameSuffix("#attachmentFileTBody");
            $("#ticketCreateForm").submit();
        }
    </script>
}
